# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'calc.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import decimal
from decimal import  Decimal
from PyQt5 import QtCore, QtGui, QtWidgets
import math

class Ui_MainWindow(object):
    minus1_status  = False
    minus2_status = False
    error_status = False
    def setupUi(self, MainWindow):
        QtGui.QFontDatabase.addApplicationFont('Usually-font.ttf')
        MainWindow.setObjectName("Калькулятор дробей")
        MainWindow.resize(900, 500)
        MainWindow.setMinimumSize(QtCore.QSize(900, 500))
        MainWindow.setMaximumSize(QtCore.QSize(900, 500))
        MainWindow.setStyleSheet("background-color: rgb(4, 61, 93);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(-110, 310, 47, 13))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(0, 0, 901, 121))
        self.label_2.setStyleSheet("background-color: rgb(3, 46, 70);")
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.name = QtWidgets.QLabel(self.centralwidget)
        self.name.setGeometry(QtCore.QRect(120, 10, 611, 111))
        self.name.setStyleSheet("background-color: transparent;\n"
"font: 8pt \"Usually-font\";\n"
"color: rgb(244, 255, 224);\n"
"")
        self.name.setObjectName("name")
        self.celoe_1 = QtWidgets.QLineEdit(self.centralwidget)
        self.celoe_1.setGeometry(QtCore.QRect(60, 200, 61, 51))
        self.celoe_1.setStyleSheet("background-color: rgb(244, 255, 224);\n"
"font: 63 20pt \"Yu Gothic UI Semibold\";\n"
"border-radius: 12px;\n"
"border-width: 2px;\n"
"border-color: rgb(15, 89, 94);")
        self.celoe_1.setObjectName("celoe_1")
        self.chislitel_1 = QtWidgets.QLineEdit(self.centralwidget)
        self.chislitel_1.setGeometry(QtCore.QRect(130, 180, 101, 41))
        self.chislitel_1.setStyleSheet("background-color: rgb(244, 255, 224);\n"
"font: 63 20pt \"Yu Gothic UI Semibold\";\n"
"border-radius: 12px;\n"
"border-width: 2px;")
        self.chislitel_1.setObjectName("chislitel_1")
        self.znamenatel_1 = QtWidgets.QLineEdit(self.centralwidget)
        self.znamenatel_1.setGeometry(QtCore.QRect(130, 230, 101, 41))
        self.znamenatel_1.setStyleSheet("background-color: rgb(244, 255, 224);\n"
"font: 63 20pt \"Yu Gothic UI Semibold\";\n"
"border-radius: 12px;\n"
"border-width: 2px;")
        self.znamenatel_1.setObjectName("znamenatel_1")
        self.celoe_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.celoe_2.setGeometry(QtCore.QRect(370, 200, 61, 51))
        self.celoe_2.setStyleSheet("background-color: rgb(244, 255, 224);\n"
"font: 63 20pt \"Yu Gothic UI Semibold\";\n"
"border-radius: 12px;\n"
"border-width: 2px;\n"
"border-color: rgb(15, 89, 94);")
        self.celoe_2.setObjectName("celoe_2")
        self.znamenatel_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.znamenatel_2.setGeometry(QtCore.QRect(440, 230, 101, 41))
        self.znamenatel_2.setStyleSheet("background-color: rgb(244, 255, 224);\n"
"font: 63 20pt \"Yu Gothic UI Semibold\";\n"
"border-radius: 12px;\n"
"border-width: 2px;")
        self.znamenatel_2.setObjectName("znamenatel_2")
        self.chislitel_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.chislitel_2.setGeometry(QtCore.QRect(440, 180, 101, 41))
        self.chislitel_2.setStyleSheet("background-color: rgb(244, 255, 224);\n"
"font: 63 20pt \"Yu Gothic UI Semibold\";\n"
"border-radius: 12px;\n"
"border-width: 2px;")
        self.chislitel_2.setObjectName("chislitel_2")
        self.celoe_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.celoe_3.setGeometry(QtCore.QRect(670, 200, 61, 51))
        self.celoe_3.setStyleSheet("background-color: rgb(244, 255, 224);\n"
"font: 63 20pt \"Yu Gothic UI Semibold\";\n"
"border-radius: 12px;\n"
"border-width: 2px;\n"
"border-color: rgb(15, 89, 94);")
        self.celoe_3.setObjectName("celoe_3")
        self.celoe_3.setReadOnly(True)
        self.znamenatel_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.znamenatel_3.setGeometry(QtCore.QRect(740, 230, 101, 41))
        self.znamenatel_3.setStyleSheet("background-color: rgb(244, 255, 224);\n"
"font: 63 20pt \"Yu Gothic UI Semibold\";\n"
"border-radius: 12px;\n"
"border-width: 2px;")
        self.znamenatel_3.setReadOnly(True)
        self.znamenatel_3.setObjectName("znamenatel_3")
        self.chislitel_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.chislitel_3.setGeometry(QtCore.QRect(740, 180, 101, 41))
        self.chislitel_3.setStyleSheet("background-color: rgb(244, 255, 224);\n"
"font: 63 20pt \"Yu Gothic UI Semibold\";\n"
"border-radius: 12px;\n"
"border-width: 2px;")
        self.chislitel_3.setObjectName("chislitel_3")
        self.chislitel_3.setReadOnly(True)
        self.symbol = QtWidgets.QComboBox(self.centralwidget)
        self.symbol.setGeometry(QtCore.QRect(270, 200, 41, 51))
        self.symbol.setStyleSheet("background-color: rgb(15, 89, 94);\n"
"color: rgb(244, 255, 224);")
        self.symbol.setObjectName("symbol")
        self.symbol.addItem("")
        self.symbol.addItem("")
        self.symbol.addItem("")
        self.symbol.addItem("")
        self.rovno = QtWidgets.QLabel(self.centralwidget)
        self.rovno.setGeometry(QtCore.QRect(560, 210, 51, 31))
        self.rovno.setStyleSheet("color: rgb(35, 182, 132);")
        self.rovno.setObjectName("rovno")
        self.minus_3 = QtWidgets.QLabel(self.centralwidget)
        self.minus_3.setGeometry(QtCore.QRect(630, 190, 41, 71))
        self.minus_3.setStyleSheet("color: rgb(35, 182, 132);\n"
"background-color: transparent;")
        self.minus_3.setObjectName("minus_3")
        self.minus_3.hide()
        self.minus_1 = QtWidgets.QLabel(self.centralwidget)
        self.minus_1.setGeometry(QtCore.QRect(20, 190, 41, 71))
        self.minus_1.setStyleSheet("color: rgb(35, 182, 132);\n"
"background-color: transparent;")
        self.minus_1.setObjectName("minus_1")
        self.minus_1.hide()
        self.minus_2 = QtWidgets.QLabel(self.centralwidget)
        self.minus_2.setGeometry(QtCore.QRect(330, 190, 41, 71))
        self.minus_2.setStyleSheet("color: rgb(35, 182, 132);\n"
"background-color: transparent;")
        self.minus_2.setObjectName("minus_2")
        self.minus_2.hide()
        self.text_drob_1 = QtWidgets.QLabel(self.centralwidget)
        self.text_drob_1.setGeometry(QtCore.QRect(160, 270, 91, 21))
        self.text_drob_1.setStyleSheet("background-color: transparent;\n"
"color: rgb(244, 255, 224);")
        self.text_drob_1.setObjectName("text_drob_1")
        self.text_drob_2 = QtWidgets.QLabel(self.centralwidget)
        self.text_drob_2.setGeometry(QtCore.QRect(470, 270, 91, 21))
        self.text_drob_2.setStyleSheet("background-color: transparent;\n"
"color: rgb(244, 255, 224);")
        self.text_drob_2.setObjectName("text_drob_2")
        self.text_drob_3 = QtWidgets.QLabel(self.centralwidget)
        self.text_drob_3.setGeometry(QtCore.QRect(770, 270, 91, 21))
        self.text_drob_3.setStyleSheet("background-color: transparent;\n"
"color: rgb(244, 255, 224);")
        self.text_drob_3.setObjectName("text_drob_3")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(0, 420, 901, 101))
        self.label_3.setStyleSheet("background-color: rgb(15, 89, 94);")
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        self.error = QtWidgets.QLabel(self.centralwidget)
        self.error.setGeometry(QtCore.QRect(50, 140, 321, 21))
        self.error.setStyleSheet("color:rgb(195, 0, 0);")
        self.error.setObjectName("error")
        self.error.hide()
        self.pm_button_1 = QtWidgets.QPushButton(self.centralwidget)
        self.pm_button_1.setGeometry(QtCore.QRect(160, 300, 41, 23))
        self.pm_button_1.setStyleSheet("background-color: rgb(15, 89, 94);\n"
"color: rgb(244, 255, 224);")
        self.pm_button_1.setObjectName("pm_button_1")
        self.pm_button_1.clicked.connect(lambda: self.minus_clicked(minus_num=1))
        self.pm_button_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pm_button_2.setGeometry(QtCore.QRect(470, 300, 41, 23))
        self.pm_button_2.setStyleSheet("background-color: rgb(15, 89, 94);\n"
"color: rgb(244, 255, 224);")
        self.pm_button_2.setObjectName("pm_button_2")
        self.pm_button_2.clicked.connect(lambda: self.minus_clicked(minus_num=2))
        self.result_num = QtWidgets.QLabel(self.centralwidget)
        self.result_num.setGeometry(QtCore.QRect(750, 290, 141, 20))
        self.result_num.setStyleSheet("background-color: transparent;\n"
"color: rgb(35, 182, 132);")
        self.error.hide()
        self.result_num.setObjectName("result_num")
        self.reshenie_button = QtWidgets.QPushButton(self.centralwidget)
        self.reshenie_button.setGeometry(QtCore.QRect(330, 350, 221, 31))
        self.reshenie_button.setStyleSheet("background-color: rgb(35, 182, 132);\n"
"color: rgb(244, 255, 224);\n"
"font: 63 16pt \"Bahnschrift SemiBold Condensed\";")
        self.reshenie_button.setObjectName("reshenie_button")
        self.reshenie_button.clicked.connect(lambda: self.reshak(znak=self.symbol.currentText()))
        self.label_2.raise_()
        self.label.raise_()
        self.name.raise_()
        self.celoe_1.raise_()
        self.chislitel_1.raise_()
        self.znamenatel_1.raise_()
        self.celoe_2.raise_()
        self.znamenatel_2.raise_()
        self.chislitel_2.raise_()
        self.celoe_3.raise_()
        self.znamenatel_3.raise_()
        self.chislitel_3.raise_()
        self.symbol.raise_()
        self.rovno.raise_()
        self.minus_3.raise_()
        self.minus_1.raise_()
        self.minus_2.raise_()
        self.text_drob_1.raise_()
        self.text_drob_2.raise_()
        self.text_drob_3.raise_()
        self.label_3.raise_()
        self.error.raise_()
        self.pm_button_1.raise_()
        self.pm_button_2.raise_()
        self.result_num.raise_()
        self.reshenie_button.raise_()
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def minus_clicked(self, minus_num):
        if minus_num == 1:
            if self.minus1_status == False:
                self.minus1_status = True
                self.minus_1.show()
            else:
                self.minus1_status = False
                self.minus_1.hide()
        elif minus_num == 2:
            if self.minus2_status == False:
                self.minus2_status = True
                self.minus_2.show()
            else:
                self.minus2_status = False
                self.minus_2.hide()


    def reshak(self, znak):

        chislitel1 = None
        chislitel2 = None
        chislitel3 = None
        znamenatel1 = None
        znamenatel2 = None
        znamenatel3 = None
        celoe1 = None
        celoe2 = None
        celoe3 = None

        if self.celoe_1.text() == '':
            celoe1 = 0
        else:
            celoe1 = self.celoe_1.text()

        if self.celoe_2.text() == '':
            celoe2 = 0
        else:
            celoe2 = self.celoe_2.text()


        chislitel1 = self.chislitel_1.text()
        chislitel1 = list(chislitel1)
        space_count = chislitel1.count(' ')
        for i in range(space_count):
            chislitel1.remove(' ')
        chislitel1 = ''.join(chislitel1)

        chislitel2 = self.chislitel_2.text()
        chislitel2 = list(chislitel2)
        space_count = chislitel2.count(' ')
        for i in range(space_count):
            chislitel2.remove(' ')
        chislitel2 = ''.join(chislitel2)

        znamenatel1 = self.znamenatel_1.text()
        znamenatel1 = list(znamenatel1)
        space_count = znamenatel1.count(' ')
        for i in range(space_count):
            znamenatel1.remove(' ')
        znamenatel1 = ''.join(znamenatel1)

        znamenatel2 = self.znamenatel_2.text()
        znamenatel2 = list(znamenatel2)
        space_count = znamenatel2.count(' ')
        for i in range(space_count):
            znamenatel2.remove(' ')
        znamenatel2 = ''.join(znamenatel2)
        if chislitel1 == '' and znamenatel1 == '':
            chislitel1 = 0
            znamenatel1 = 1

        if chislitel2 == '' and znamenatel2 == '':
            chislitel2 = 0
            znamenatel2 = 1
        try:
            celoe1 = int(celoe1)
            celoe2 = int(celoe2)
            chislitel1 = int(chislitel1)
            chislitel2 = int(chislitel2)
            znamenatel1 = int(znamenatel1)
            znamenatel2 = int(znamenatel2)

        except ValueError:
            self.error.show()

        else:
            self.error.hide()
            if znak == '+':

                chislitel1 += celoe1 * znamenatel1
                chislitel2 += celoe2 * znamenatel2
                if self.minus1_status == True:
                    chislitel1 = -chislitel1
                if self.minus2_status == True:
                    chislitel2 =-chislitel2
                i = min(znamenatel1, znamenatel2)
                while True:
                    if i % znamenatel1 == 0 and i % znamenatel2 == 0:
                        break
                    i += 1
                chislitel1 = i//znamenatel1*chislitel1
                znamenatel1 = i//znamenatel1*znamenatel1
                chislitel2 = i // znamenatel2 * chislitel2
                znamenatel2 = i // znamenatel2 * znamenatel2
                chislitel3 = chislitel1+chislitel2
                znamenatel3 = znamenatel1
                result_num = Decimal(chislitel3) / Decimal(znamenatel3)
                if chislitel3 < 0:
                    self.minus_3.show()
                    chislitel3 = abs(chislitel3)
                elif znamenatel3 < 0:
                    self.minus_3.show()
                    znamenatel3 = abs(znamenatel3)
                else:
                    self.minus_3.hide()

                if chislitel3 >= znamenatel3:
                    celoe3 = list(str(chislitel3/znamenatel3))
                    not_index = celoe3.index('.')
                    true_celoe3 = [celoe3[i] for i in range(not_index)]
                    celoe3 = int(''.join(true_celoe3))
                    if celoe3 == 0:
                        celoe3 = znamenatel3
                        chislitel3 = ''
                        znamenatel3 = ''
                    else:
                        chislitel3 = chislitel3 - celoe3*znamenatel3
                nod = math.gcd(chislitel3, znamenatel3)
                chislitel3 = chislitel3//nod
                znamenatel3 = znamenatel3//nod
                if chislitel3 == 0:
                    chislitel3 = ''
                    znamenatel3 = ''
                if celoe3 == None:
                    celoe3 = ''

                if chislitel3 == '' and znamenatel3 == '' and celoe3 == '':
                    celoe3 = 0
                self.celoe_3.setText(str(celoe3))
                self.chislitel_3.setText(str(chislitel3))
                self.znamenatel_3.setText(str(znamenatel3))
                self.result_num.setText(str(result_num))

            if znak == '-':

                chislitel1 += celoe1 * znamenatel1
                chislitel2 += celoe2 * znamenatel2
                if self.minus1_status == True:
                    chislitel1 = 0 - chislitel1
                if self.minus2_status == True:
                    chislitel2 = 0 - chislitel2
                i = min(znamenatel1, znamenatel2)
                while True:
                    if i % znamenatel1 == 0 and i % znamenatel2 == 0:
                        break
                    i += 1
                chislitel1 = i//znamenatel1*chislitel1
                znamenatel1 = i//znamenatel1*znamenatel1
                chislitel2 = i // znamenatel2 * chislitel2
                znamenatel2 = i // znamenatel2 * znamenatel2
                chislitel3 = chislitel1-chislitel2
                znamenatel3 = znamenatel1
                result_num = Decimal(chislitel3) / Decimal(znamenatel3)
                if chislitel3 < 0:
                    self.minus_3.show()
                    chislitel3 = abs(chislitel3)
                elif znamenatel3 < 0:
                    self.minus_3.show()
                    znamenatel3 = abs(znamenatel3)
                else:
                    self.minus_3.hide()

                if chislitel3 >= znamenatel3:
                    celoe3 = list(str(chislitel3/znamenatel3))
                    not_index = celoe3.index('.')
                    true_celoe3 = [celoe3[i] for i in range(not_index)]
                    celoe3 = int(''.join(true_celoe3))
                    if celoe3 == 0:
                        celoe3 = znamenatel3
                        chislitel3 = ''
                        znamenatel3 = ''
                    else:
                        chislitel3 = chislitel3 - celoe3*znamenatel3
                nod = math.gcd(chislitel3, znamenatel3)
                chislitel3 = chislitel3//nod
                znamenatel3 = znamenatel3//nod
                if chislitel3 == 0:
                    chislitel3 = ''
                    znamenatel3 = ''
                if celoe3 == None:
                    celoe3 = ''

                if chislitel3 == '' and znamenatel3 == '' and celoe3 == '':
                    celoe3 = 0

                self.celoe_3.setText(str(celoe3))
                self.chislitel_3.setText(str(chislitel3))
                self.znamenatel_3.setText(str(znamenatel3))
                self.result_num.setText(str(result_num))

            if znak == 'x':

                chislitel1 += celoe1 * znamenatel1
                chislitel2 += celoe2 * znamenatel2
                if self.minus1_status == True:
                    chislitel1 = 0 - chislitel1
                if self.minus2_status == True:
                    chislitel2 = 0 - chislitel2

                chislitel3 = chislitel1 * chislitel2
                znamenatel3 = znamenatel1 * znamenatel2
                result_num = Decimal(chislitel3) / Decimal(znamenatel3)
                if chislitel3 < 0:
                    self.minus_3.show()
                    chislitel3 = abs(chislitel3)
                elif znamenatel3 < 0:
                    self.minus_3.show()
                    znamenatel3 = abs(znamenatel3)
                else:
                    self.minus_3.hide()

                if chislitel3 >= znamenatel3:
                    celoe3 = list(str(chislitel3 / znamenatel3))
                    not_index = celoe3.index('.')
                    true_celoe3 = [celoe3[i] for i in range(not_index)]
                    celoe3 = int(''.join(true_celoe3))
                    if celoe3 == 0:
                        celoe3 = znamenatel3
                        chislitel3 = ''
                        znamenatel3 = ''
                    else:
                        chislitel3 = chislitel3 - celoe3 * znamenatel3
                nod = math.gcd(chislitel3, znamenatel3)
                chislitel3 = chislitel3 // nod
                znamenatel3 = znamenatel3 // nod
                if chislitel3 == 0:
                    chislitel3 = ''
                    znamenatel3 = ''
                if celoe3 == None:
                    celoe3 = ''

                if chislitel3 == '' and znamenatel3 == '' and celoe3 == '':
                    celoe3 = 0

                self.celoe_3.setText(str(celoe3))
                self.chislitel_3.setText(str(chislitel3))
                self.znamenatel_3.setText(str(znamenatel3))
                self.result_num.setText(str(result_num))

            if znak == '÷':
                try:
                    chislitel1 += celoe1 * znamenatel1
                    chislitel2 += celoe2 * znamenatel2
                    if self.minus1_status == True:
                        chislitel1 = 0 - chislitel1
                    if self.minus2_status == True:
                        chislitel2 = 0 - chislitel2
                    chislitel3 = chislitel1 * znamenatel2
                    znamenatel3 = znamenatel1 * chislitel2
                    result_num = Decimal(chislitel3) / Decimal(znamenatel3)
                    if chislitel3 < 0 and znamenatel3 < 0:
                        chislitel3 = abs(chislitel3)
                        znamenatel3 = abs(znamenatel3)
                    elif chislitel3 < 0 or znamenatel3 < 0:
                        chislitel3 = abs(chislitel3)
                        znamenatel3 = abs(znamenatel3)
                        self.minus_3.show()

                    if chislitel3 >= znamenatel3:
                        celoe3 = list(str(chislitel3 / znamenatel3))
                        not_index = celoe3.index('.')
                        true_celoe3 = [celoe3[i] for i in range(not_index)]
                        celoe3 = int(''.join(true_celoe3))
                        chislitel3 = chislitel3 - celoe3 * znamenatel3

                    nod = math.gcd(chislitel3, znamenatel3)
                    chislitel3 = chislitel3 // nod
                    znamenatel3 = znamenatel3 // nod
                    if result_num < 0:
                        self.minus_3.show()
                    else:
                        self.minus_3.hide()
                    if chislitel3 == 0:
                        chislitel3 = ''
                        znamenatel3 = ''
                    if celoe3 == None:
                        celoe3 = ''
                    if celoe3 == 'None':
                        celoe3 = ''
                    if celoe3 == 0:
                        celoe3 = ''

                    if chislitel3 == '' and znamenatel3 == '' and celoe3 == '':
                        celoe3 = 0

                    self.celoe_3.setText(str(celoe3))
                    self.chislitel_3.setText(str(chislitel3))
                    self.znamenatel_3.setText(str(znamenatel3))
                    self.result_num.setText(str(result_num))
                except ValueError and AttributeError and decimal.DivisionByZero:
                    self.error.show()
                else:
                    self.error.hide()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Калькулятор дробей by Борис Глаголевский"))
        self.label.setText(_translate("MainWindow", "TextLabel"))
        self.name.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:48pt;\">Дроби</span></p><p align=\"center\"><span style=\" font-size:18pt;\">Калькулятор</span></p><p><br/></p></body></html>"))
        self.chislitel_1.setToolTip(_translate("MainWindow", "<html><head/><body><p align=\"center\"><br/></p></body></html>"))
        self.chislitel_1.setWhatsThis(_translate("MainWindow", "<p align=\"center\">"))
        self.chislitel_2.setToolTip(_translate("MainWindow", "<html><head/><body><p align=\"center\"><br/></p></body></html>"))
        self.chislitel_2.setWhatsThis(_translate("MainWindow", "<p align=\"center\">"))
        self.chislitel_3.setToolTip(_translate("MainWindow", "<html><head/><body><p align=\"center\"><br/></p></body></html>"))
        self.chislitel_3.setWhatsThis(_translate("MainWindow", "<p align=\"center\">"))
        self.symbol.setItemText(0, _translate("MainWindow", "+"))
        self.symbol.setItemText(1, _translate("MainWindow", "-"))
        self.symbol.setItemText(2, _translate("MainWindow", "x"))
        self.symbol.setItemText(3, _translate("MainWindow", "÷"))
        self.rovno.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:20pt; font-weight:600;\">=</span></p></body></html>"))
        self.minus_3.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:36pt; font-weight:600;\">-</span></p></body></html>"))
        self.minus_1.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:36pt; font-weight:600;\">-</span></p></body></html>"))
        self.minus_2.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:36pt; font-weight:600;\">-</span></p></body></html>"))
        self.text_drob_1.setText(_translate("MainWindow", "Дробь 1"))
        self.text_drob_2.setText(_translate("MainWindow", "Дробь 2"))
        self.text_drob_3.setText(_translate("MainWindow", "Результат"))
        self.error.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:11pt; font-weight:600;\">*Введите корректные дроби.</span></p></body></html>"))
        self.pm_button_1.setText(_translate("MainWindow", "+/-"))
        self.pm_button_2.setText(_translate("MainWindow", "+/-"))
        self.result_num.setText(_translate("MainWindow", "num"))
        self.reshenie_button.setText(_translate("MainWindow", "Вычислить"))



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
